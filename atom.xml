<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xiaopc</title>
  
  <subtitle>Dev+Ops (en)</subtitle>
  <link href="https://xiaopc.org/blog-en/atom.xml" rel="self"/>
  
  <link href="https://xiaopc.org/blog-en/"/>
  <updated>2023-07-31T01:47:14.258Z</updated>
  <id>https://xiaopc.org/blog-en/</id>
  
  <author>
    <name>xiaopc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Introduction for Crypto-JS and a common issue</title>
    <link href="https://xiaopc.org/blog-en/2020/05/29/Introduction-for-Crypto-JS-and-a-common-issue/"/>
    <id>https://xiaopc.org/blog-en/2020/05/29/Introduction-for-Crypto-JS-and-a-common-issue/</id>
    <published>2020-05-29T01:07:36.000Z</published>
    <updated>2023-07-31T01:47:14.258Z</updated>
    
    <content type="html"><![CDATA[<p><em>original post date: July 26, 2016</em></p><h2 id="overview">Overview</h2><p>Using JS encryption is a viable option when HTTPS is not available, or when front-end security needs to be increased.</p><p>Crypto-js supports Hashes like MD5/SHA-1/SHA-2/SHA-3/HMAC/PBKDF2, and ciphers like AES/DES/3DES/Rabbit/RC4/RC4Drop, with optional Block Modes and Padding. It can load a single mode only.</p><p>Link: <a href="https://code.google.com/archive/p/crypto-js/">https://code.google.com/archive/p/crypto-js/</a> &amp;&amp; <a href="https://github.com/brix/crypto-js">https://github.com/brix/crypto-js</a></p><span id="more"></span><h2 id="md5">MD5</h2><p><code>md5.js</code> can be referenced separately.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">CryptoJS</span>.<span class="title class_">MD5</span>(<span class="string">&quot;test&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="pbkdf2">PBKDF2</h2><p><code>pbkdf2.js</code> can be referenced separately.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// official examples</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> salt = <span class="title class_">CryptoJS</span>.<span class="property">lib</span>.<span class="property">WordArray</span>.<span class="title function_">random</span>(<span class="number">128</span>/<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key128Bits = <span class="title class_">CryptoJS</span>.<span class="title class_">PBKDF2</span>(str, salt, &#123; <span class="attr">keySize</span>: <span class="number">128</span>/<span class="number">32</span> &#125;);</span><br><span class="line"><span class="keyword">var</span> key256Bits = <span class="title class_">CryptoJS</span>.<span class="title class_">PBKDF2</span>(str, salt, &#123; <span class="attr">keySize</span>: <span class="number">256</span>/<span class="number">32</span> &#125;);</span><br><span class="line"><span class="keyword">var</span> key512Bits = <span class="title class_">CryptoJS</span>.<span class="title class_">PBKDF2</span>(str, salt, &#123; <span class="attr">keySize</span>: <span class="number">512</span>/<span class="number">32</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key512Bits1000Iterations = <span class="title class_">CryptoJS</span>.<span class="title class_">PBKDF2</span>(<span class="string">&quot;Secret Passphrase&quot;</span>, salt, &#123;</span><br><span class="line"><span class="attr">keySize</span>: <span class="number">512</span>/<span class="number">32</span>,</span><br><span class="line"><span class="attr">iterations</span>: <span class="number">1000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="aes">AES</h2><p>The default is AES-CBC-Pkcs5 (PKcs7), while other ciphers can be referenced separately. The key length is automatically determined with the length of the password entered. If using [Passphrase(https://en.wikipedia.org/wiki/Passphrase)], it's 256 bits.</p><p>Encryption: (here's the issue mentioned before)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123456&#x27;</span>; <span class="comment">// content to encrypt</span></span><br><span class="line"><span class="keyword">var</span> key = <span class="string">&#x27;0123456789abcdef&#x27;</span>; <span class="comment">// key</span></span><br><span class="line"><span class="keyword">var</span> iv = <span class="string">&#x27;0123456789abcdef&#x27;</span>; <span class="comment">// initial iv (default is a random number)</span></span><br><span class="line"></span><br><span class="line">key = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(key); <span class="comment">// **Attention: if jQuery is loaded, add &quot;toString()&quot;**</span></span><br><span class="line">iv = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(iv); <span class="comment">// **same as above**</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> encrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(str, key, &#123;</span><br><span class="line"> <span class="attr">iv</span>: iv,</span><br><span class="line"> <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>,</span><br><span class="line"> <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// **encrypt() returns an object!**</span></span><br><span class="line">encrypted = encrypted.<span class="title function_">toString</span>();</span><br></pre></td></tr></table></figure><p>Decryption： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> decrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(encrypted, key, &#123;</span><br><span class="line"> <span class="attr">iv</span>: iv,</span><br><span class="line"> <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>,</span><br><span class="line"> <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// to utf-8 string</span></span><br><span class="line">decrypted = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">stringify</span>(decrypted);</span><br></pre></td></tr></table></figure></p><h2 id="other-ciphers">Other Ciphers</h2><p>It's basically the same, except that Rabbit and RC4 don't support defining mode and padding.</p><hr /><p>References:</p><p>[1] https://blog.zhengxianjun.com/2015/05/javascript-crypto-js/</p><p>[2] http://stackoverflow.com/questions/35529804/using-crypto-js-to-encrypt-password-and-send-form-via-ajax-and-decrypt-in-java</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;original post date: July 26, 2016&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Using JS encryption is a viable option when HTTPS is not available, or when front-end security needs to be increased.&lt;/p&gt;
&lt;p&gt;Crypto-js supports Hashes like MD5/SHA-1/SHA-2/SHA-3/HMAC/PBKDF2, and ciphers like AES/DES/3DES/Rabbit/RC4/RC4Drop, with optional Block Modes and Padding. It can load a single mode only.&lt;/p&gt;
&lt;p&gt;Link: &lt;a href=&quot;https://code.google.com/archive/p/crypto-js/&quot;&gt;https://code.google.com/archive/p/crypto-js/&lt;/a&gt; &amp;amp;&amp;amp; &lt;a href=&quot;https://github.com/brix/crypto-js&quot;&gt;https://github.com/brix/crypto-js&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="frontend" scheme="https://xiaopc.org/blog-en/categories/frontend/"/>
    
    
  </entry>
  
  <entry>
    <title>Repost: Summary for getchar() and eof</title>
    <link href="https://xiaopc.org/blog-en/2020/05/28/Repost-Summary-for-getchar-and-eof/"/>
    <id>https://xiaopc.org/blog-en/2020/05/28/Repost-Summary-for-getchar-and-eof/</id>
    <published>2020-05-28T01:24:53.000Z</published>
    <updated>2023-07-31T01:47:14.258Z</updated>
    
    <content type="html"><![CDATA[<p><em>original post date: July 22, 2016</em></p><span id="more"></span><p>Facing classic books, carefully read every word, and then understand. I was looking at <em>Section 1.5: Character Input and Output</em> of K&amp;R's <em>The C Programming Language Second Edition</em> , and was puzzled by <code>getchar()</code> and <code>EOF</code>. This may be due to a lack of understanding of how <code>getchar()</code> and <code>EOF</code> works. Therefore, it seems necessary to summarize, otherwise, a lot of trivial knowledge will fade away after a long time, only write down is the best way.</p><p>In fact, the most typical program is just a few lines of code. My Environment Is Debian GNU / Linux, as it is on other systems.</p><h2 id="two-points-for-getchar">Two Points for getchar()</h2><h3 id="getchar-is-processing-in-units-of-rows">getchar is processing in units of rows</h3><p>If the first character entered is a valid character, the input is the end-of-file Character EOF (Ctrl + Z for Windows; Ctrl + D for Unix / Linux). Then only if the last input character is a newline character <code>\n</code> or a end-of-file character, EOF will be discussed later, will getchar stop, and the whole program will run down. For example, the following sequence:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>((c = getchar()) != EOF)&#123;</span><br><span class="line">    <span class="built_in">putchar</span>(c);</span><br></pre></td></tr></table></figure><p>Execute the program, Type: <code>ABC</code>, then enter. Then the program executes <code>putchar(c)</code> and prints out <code>ABC</code>, which, don't forget, also has a carriage return. You can then proceed with the input, and when the newline character is encountered again, the program outputs the input character for that line to the terminal.</p><p>For <code>getchar()</code>, I'm sure many beginners will ask, isn't <code>getchar()</code> read by characters? So, now that I've entered the first character <code>a</code>, I must have a while loop <code>(c = getchar()) != EOF</code> condition, then <code>putchar(c)</code> should be executed to output a character <code>a</code> at the terminal. Yes, that's what I always thought when I used <code>getchar()</code>, but instead of doing that, the program had to read a newline or end-of-file EOF to get an output.</p><p>One explanation for this problem is that, when the creator wrote C, there was no such thing as terminal input. All input was actually read from a file, which was usually in behavioral units. Therefore, only when a newline character is encountered does the program think the input is finished and then take action to execute the rest of the program. Also, the input is accessed as a File, so ending a File input requires EOF. This is why <code>getchar()</code> ends the input exit with EOF.</p><h3 id="the-return-value-of-getchar-is-typically-a-character-but-it-can-also-be-negative-which-is-eof.">The return value of getchar() is typically a character, but it can also be negative, which is EOF.</h3><p>The point to emphasize here is that the <code>getchar()</code> function usually returns the characters entered by the terminal, which correspond to non-negative ASCII values in the character system. So, a lot of times, we would write code like this:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c;</span><br><span class="line">c = getchar();</span><br></pre></td></tr></table></figure><p>There's a good chance something could go wrong. Because the <code>getchar()</code> function returns EOF when it encounters Ctrl+D on Linux, the EOF, in addition to the characters entered by the terminal, which is generally defined as <code>-1</code> in the library. Therefore, in this case, the <code>getchar()</code> function returns a negative value, and it is incorrect to assign a negative value to a variable of type <code>char</code>. In order to be able to define a variable that contains all the possible values returned by the <code>getchar()</code> function, the proper way to define it is as follows, specifically mentioned in K&amp;R:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> c;</span><br><span class="line">c = getchar();</span><br></pre></td></tr></table></figure><h2 id="two-points-for-eof">Two Points for EOF</h2><h3 id="eof-as-the-end-of-file-condition">EOF As the end-of-file condition</h3><p>EOF is the end-of-file character, but it is not always possible to end a file by typing Ctrl+D in Windows:</p><ol type="1"><li><p>when the <code>getchar()</code> function is executed, to input the first character directly input Ctrl+D, You can jump out of <code>getchar()</code> to execute other parts of the program;</p></li><li><p>type Ctrl+D when the character you entered earlier is a newline character;</p></li><li><p>Enter Ctrl+D twice in a row if there is a character input before and it is not a newline character. The second input Ctrl+D functions as the end of the file. The first input Ctrl+D functions as shown below.</p></li></ol><p>In fact, all three cases can be summed up by saying that Ctrl+D is the end of the file only if getchar prompts for a new input.</p><h3 id="when-eof-is-the-line-terminator-typing-ctrld-does-not-end-getchar-but-only-causes-getchar-to-prompt-for-the-next-round-of-input">When EOF is the line Terminator, typing Ctrl+D does not end Getchar, but only causes getchar() to prompt for the next round of input</h3><p>This is mainly when a new line of <code>getchar()</code> input, when some characters can not contain a newline, directly press Ctrl+D, at this point the Ctrl+D is not the end of the file, but only the function equivalent to the newline, ends the current input. In the example above, if you type <code>abc</code> at run time and then Ctrl+D, The output is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abcabc</span><br></pre></td></tr></table></figure><p>Note: The first set of <code>abc</code> is entered from the terminal, and then Ctrl+D is entered to output the second set of <code>abc</code>, with the cursor pausing after the C of the second set of characters, and then a new input can be made. At this point, if you type Ctrl+D again, it acts as the end of the file, ending <code>getchar()</code>.</p><p>If you type <code>abc</code>, then press Enter to enter a newline character, the terminal appears as:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abc       // the first line with Enter \r</span><br><span class="line">abc       // the second line</span><br><span class="line">          // the third line</span><br></pre></td></tr></table></figure><p>Where the first line is the terminal input, the second line is the terminal output, and the cursor stops at the third line, waiting for a new terminal input.</p><p>You can also see the difference in the output when Ctrl+D and newline are used as line endings, respectively.</p><p>The function of EOF can also be summarized as follows: When the terminal has character input, Ctrl+D produces EOF equivalent to the end of the line input, will cause a new round of <code>getchar()</code> input; when the terminal has no character input or can say when <code>getchar()</code> reads a new round of input, type Ctrl+D and the resulting EOF corresponds to the end of the file, ending the execution of <code>getchar()</code>.</p><p>The summary of EOF in the second part of this article applies to the terminal driver in a one-line-at-a-time mode. That is, while <code>getchar()</code> and <code>putchar()</code> do follow one character at a time. But the terminal driver is in a one-line-at-a-time mode, where the input only ends at <code>\n</code> or Eof, so the output on the terminal is line-by-line.</p><p>If you want the terminal to read a character on the end of the input, the following procedure is one way to achieve reference to <em>C Expert Programming</em>, with a slight change:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">    <span class="comment">/* one-line-at-a-time */</span></span><br><span class="line">    system(<span class="string">&quot;stty codeblock&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* one-character-at-a-time */</span></span><br><span class="line">     c = getchar();</span><br><span class="line">    <span class="built_in">putchar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* back to one-line-at-a-time */</span></span><br><span class="line">     system(<span class="string">&quot;stty cooked&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Compile to run the program, when such as enter a character, directly from a character, and then the end of the program.</p><p>Thus, due to the different terminal-driven mode, the conditions for the end of the Getchar input are different. A carriage return or EOF is required in normal mode, but in one character at a time mode, it ends after one character is entered.</p><hr /><p>Origin(invalid link): http://blog.chinaunix.net/u1/53811/showart_421385.html</p><p>Repost: http://blog.csdn.net/ithomer/article/details/5669762</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;original post date: July 22, 2016&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="c&amp;cpp" scheme="https://xiaopc.org/blog-en/categories/c-cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>Speaking of httpoxy</title>
    <link href="https://xiaopc.org/blog-en/2020/05/27/Speaking-of-httpoxy/"/>
    <id>https://xiaopc.org/blog-en/2020/05/27/Speaking-of-httpoxy/</id>
    <published>2020-05-27T08:04:37.000Z</published>
    <updated>2023-07-31T01:47:14.258Z</updated>
    
    <content type="html"><![CDATA[<p><em>original post date: July 20, 2016</em></p><ol type="1"><li>Service who get HTTP_PROXY from environment <code>PATH</code> could be infected (wget/curl will be fine).</li><li>Service data could be stolen while connecting outbound destination by attackers' given <code>HTTP_PROXY</code>.</li><li>Under CGI/FPM mode.</li><li>Fix for nginx: add these to <code>fastcgi.conf</code>: <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fastcgi_param</span> HTTP_PROXY <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure></li><li>Apache has official update.</li></ol><span id="more"></span><hr /><p>References:</p><p>[1] https://httpoxy.org/</p><p>[2] http://www.laruence.com/2016/07/19/3101.html</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;original post date: July 20, 2016&lt;/em&gt;&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Service who get HTTP_PROXY from environment &lt;code&gt;PATH&lt;/code&gt; could be infected (wget/curl will be fine).&lt;/li&gt;
&lt;li&gt;Service data could be stolen while connecting outbound destination by attackers&#39; given &lt;code&gt;HTTP_PROXY&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Under CGI/FPM mode.&lt;/li&gt;
&lt;li&gt;Fix for nginx: add these to &lt;code&gt;fastcgi.conf&lt;/code&gt;: &lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;fastcgi_param&lt;/span&gt; HTTP_PROXY &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;Apache has official update.&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="backend" scheme="https://xiaopc.org/blog-en/categories/backend/"/>
    
    
  </entry>
  
  <entry>
    <title>How to reverse proxy Google Analytics and reCaptcha via Nginx</title>
    <link href="https://xiaopc.org/blog-en/2020/05/26/How-to-reverse-proxy-Google-Analytics-and-reCaptcha-via-Nginx/"/>
    <id>https://xiaopc.org/blog-en/2020/05/26/How-to-reverse-proxy-Google-Analytics-and-reCaptcha-via-Nginx/</id>
    <published>2020-05-26T01:32:22.000Z</published>
    <updated>2023-07-31T01:47:14.258Z</updated>
    
    <content type="html"><![CDATA[<p><em>original post date: July 18, 2016</em></p><blockquote><p>2018/3/11 update</p><p>There are a lot of problems with this approach (lack of access to real IP, etc.) , and given the improved availability of Google Analytics services in China, it is no longer recommended. If reliability is sought, it is recommended to use domestic services or self-built statistical services.</p></blockquote><p>You can find nginx.conf for reversing proxy Google Analytics on Google, but most of them are for the old version. And so do reCaptcha's. After solving some issues, here's my code.</p><span id="more"></span><p>Attention: 1. <code>ngx_http_substitutions_filter_module module</code> needed。 2. DO NOT ADD <code>X-Frame-Options DENY</code> WHILE CONFIGURING SSL (<code>SOMEORIGIN</code> would be fine for self using, not tested) 3. After reverse proxy reCaptcha, challenge will be difficult. (Using proxies will reduce credibility, and some code uses complex obfuscations that result in client-side identification code can't be modified)</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reCaptcha reverse proxy</span></span><br><span class="line"> <span class="section">location</span> /recaptcha &#123;</span><br><span class="line">     <span class="attribute">default_type</span> text/html;</span><br><span class="line">     <span class="attribute">subs_filter_types</span> text/css text/xml text/javascript;</span><br><span class="line">     <span class="attribute">subs_filter</span> <span class="string">&#x27;www.gstatic.com&#x27;</span> <span class="string">&#x27;lab.xpc.im/wwwgstatic&#x27;</span> g;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> X-real-ip <span class="variable">$remote_addr</span>;</span><br><span class="line">     <span class="attribute">proxy_pass</span> https://www.google.com/recaptcha;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> Accept-Encoding <span class="string">&quot;&quot;</span>; <span class="comment">#see [3]</span></span><br><span class="line">     <span class="attribute">proxy_set_header</span> User-Agent <span class="variable">$http_user_agent</span>;</span><br><span class="line">     break;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="section">location</span> /wwwgstatic &#123;</span><br><span class="line">     <span class="attribute">subs_filter_types</span> text/css text/xml text/javascript;</span><br><span class="line">     <span class="attribute">subs_filter</span> <span class="string">&#x27;www.gstatic.com&#x27;</span> <span class="string">&#x27;lab.xpc.im/wwwgstatic&#x27;</span> g;</span><br><span class="line">     <span class="attribute">subs_filter</span> <span class="string">&#x27;www.google.com/recaptcha&#x27;</span> <span class="string">&#x27;lab.xpc.im/recaptcha&#x27;</span> g;</span><br><span class="line">     <span class="attribute">subs_filter</span> <span class="string">&#x27;ssl.gstatic.com&#x27;</span> <span class="string">&#x27;lab.xpc.im/sslgstatic&#x27;</span> g;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> X-real-ip <span class="variable">$remote_addr</span>;</span><br><span class="line">     <span class="attribute">proxy_pass</span> https://www.gstatic.com/;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> Accept-Encoding <span class="string">&quot;&quot;</span>;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> User-Agent <span class="variable">$http_user_agent</span>;</span><br><span class="line">     break;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="section">location</span> /sslgstatic &#123;</span><br><span class="line">     <span class="attribute">subs_filter_types</span> text/css text/xml text/javascript;</span><br><span class="line">     <span class="attribute">subs_filter</span> <span class="string">&#x27;www.gstatic.com&#x27;</span> <span class="string">&#x27;lab.xpc.im/wwwgstatic&#x27;</span> g;</span><br><span class="line">     <span class="attribute">subs_filter</span> <span class="string">&#x27;www.google.com/recaptcha&#x27;</span> <span class="string">&#x27;lab.xpc.im/recaptcha&#x27;</span> g;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> X-real-ip <span class="variable">$remote_addr</span>;</span><br><span class="line">     <span class="attribute">proxy_pass</span> https://ssl.gstatic.com/;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> Accept-Encoding <span class="string">&quot;&quot;</span>;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> User-Agent <span class="variable">$http_user_agent</span>;</span><br><span class="line">     break;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Google Analytics reverse proxy</span></span><br><span class="line"> <span class="section">location</span> /ga &#123;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> X-real-ip <span class="variable">$remote_addr</span>;</span><br><span class="line">     <span class="attribute">rewrite</span><span class="regexp"> ^/ga/(.*)$</span> /<span class="variable">$1</span>?<span class="variable">$args</span>&amp;amp;uip=$remote_addr;</span><br><span class="line">     <span class="attribute">proxy_pass</span> https://www.google-analytics.com;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> User-Agent <span class="variable">$http_user_agent</span>;</span><br><span class="line">     break;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="section">location</span> /analytics &#123;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> X-real-ip <span class="variable">$remote_addr</span>;</span><br><span class="line">     <span class="attribute">rewrite</span><span class="regexp"> ^/ga/(.*)$</span> /<span class="variable">$1</span>?<span class="variable">$args</span>&amp;amp;uip=$remote_addr;</span><br><span class="line">     <span class="attribute">proxy_pass</span> https://www.google.com;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> User-Agent <span class="variable">$http_user_agent</span>;</span><br><span class="line">     break;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="section">location</span> /analytics.js &#123;</span><br><span class="line">     <span class="attribute">default_type</span> text/html;</span><br><span class="line">     <span class="attribute">subs_filter_types</span> text/css text/xml text/javascript;</span><br><span class="line">     <span class="attribute">subs_filter</span> <span class="string">&#x27;www.google-analytics.com&#x27;</span> <span class="string">&#x27;lab.xpc.im/ga&#x27;</span> g;</span><br><span class="line">     <span class="attribute">subs_filter</span> <span class="string">&#x27;www.google.com/analytics&#x27;</span> <span class="string">&#x27;lab.xpc.im/analytics&#x27;</span> g;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> X-real-ip <span class="variable">$remote_addr</span>;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> Referer https://www.google-analytics.com;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> Host www.google-analytics.com;</span><br><span class="line">     <span class="attribute">proxy_pass</span> https://www.google-analytics.com;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> Accept-Encoding <span class="string">&quot;&quot;</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr /><p>References:</p><p>[1] https://ruby-china.org/topics/27400</p><p>[2] https://rocfang.gitbooks.io/dev-notes/content/guan_yu_proxy_pass_de_can_shu_lu_jing_wen_ti.html</p><p>[3] https://www.v2ex.com/t/234923</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;original post date: July 18, 2016&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2018/3/11 update&lt;/p&gt;
&lt;p&gt;There are a lot of problems with this approach (lack of access to real IP, etc.) , and given the improved availability of Google Analytics services in China, it is no longer recommended. If reliability is sought, it is recommended to use domestic services or self-built statistical services.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can find nginx.conf for reversing proxy Google Analytics on Google, but most of them are for the old version. And so do reCaptcha&#39;s. After solving some issues, here&#39;s my code.&lt;/p&gt;</summary>
    
    
    
    <category term="backend" scheme="https://xiaopc.org/blog-en/categories/backend/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello There!</title>
    <link href="https://xiaopc.org/blog-en/2020/05/25/Hello-There/"/>
    <id>https://xiaopc.org/blog-en/2020/05/25/Hello-There/</id>
    <published>2020-05-25T03:22:03.000Z</published>
    <updated>2023-07-31T01:47:14.258Z</updated>
    
    <content type="html"><![CDATA[<p>Here's the English version for <a href="https://xiaopc.org">xiaopc.org</a>.</p><p>I will try to keep here up to date with the other blog.</p><p>EOF</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;Here&#39;s the English version for &lt;a href=&quot;https://xiaopc.org&quot;&gt;xiaopc.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I will try to keep here up to date with the other blog.&lt;/p&gt;
&lt;p&gt;EOF&lt;/p&gt;</summary>
    
    
    
    <category term="Others" scheme="https://xiaopc.org/blog-en/categories/others/"/>
    
    
  </entry>
  
</feed>
